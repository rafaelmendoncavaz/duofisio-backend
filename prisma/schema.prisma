generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Employees {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isAdmin      Boolean       @default(false)
  appointments Appointment[]

  @@map("employee")
}

model Patients {
  id                 String            @id @default(uuid())
  name               String
  cpf                String            @unique
  dateOfBirth        DateTime
  phone              String?
  email              String?           @unique
  sex                Sex?
  profession         String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  addressId          String
  adultResponsibleId String?
  appointments       Appointment[]
  clinicalData       ClinicalData[]
  address            Address           @relation(fields: [addressId], references: [id], onDelete: Cascade)
  adultResponsible   AdultResponsible? @relation(fields: [adultResponsibleId], references: [id])

  @@map("patient")
}

model ClinicalData {
  id           String        @id @default(uuid())
  cid          String
  covenant     String?
  expires      DateTime?
  CNS          String?
  allegation   String
  diagnosis    String
  patientId    String
  appointments Appointment[]
  patient      Patients      @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("clinical_data")
}

model Address {
  id               String            @id @default(uuid())
  cep              String
  street           String
  number           Int
  complement       String?
  neighborhood     String
  city             String
  state            String
  adultResponsible AdultResponsible?
  patients         Patients[]

  @@map("address")
}

model AdultResponsible {
  id        String     @id @default(uuid())
  name      String
  cpf       String     @unique
  phone     String
  email     String     @unique
  addressId String     @unique
  address   Address    @relation(fields: [addressId], references: [id], onDelete: Cascade)
  patient   Patients[]

  @@map("adult_responsible")
}

model Appointment {
  id               String       @id @default(uuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  patientId        String
  employeeId       String
  clinicalRecordId String
  totalSessions    Int
  clinicalRecord   ClinicalData @relation(fields: [clinicalRecordId], references: [id])
  employee         Employees    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  patient          Patients     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  sessions         Session[]

  @@map("appointments")
}

model Session {
  id              String            @id @default(uuid())
  status          AppointmentStatus
  appointmentDate DateTime
  duration        Int
  sessionNumber   Int
  progress        String?
  appointmentId   String
  appointment     Appointment       @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Sex {
  Masculino
  Feminino
}

enum AppointmentStatus {
  SOLICITADO
  CONFIRMADO
  CANCELADO
  FINALIZADO
}
